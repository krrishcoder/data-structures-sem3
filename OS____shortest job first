#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include <algorithm>
#include <list>

using namespace std;

//thtis is sjf (non preemetive)

class process{
    static int kk;

string name ="P"+to_string(kk);

int arrival_time;
int burst_time;

public:
   int getArrival(){
       return arrival_time;}

   int getBurst(){
     return burst_time;}

     process(int a,int b){
        arrival_time= a;
        burst_time=b;
        kk++;
     }

     void print(){
     cout<<name<<"  "<<"arrival :"<<arrival_time<<"burst time :"<<burst_time<<endl;}


       bool operator<(const process &r) const
    {
         if(burst_time == r.burst_time){
            return arrival_time <= r.arrival_time;
   }
        return burst_time < r.burst_time;

    }

    // overload the operator> (if required)
    bool operator>(const process &r) const
    {
         if(burst_time == r.burst_time){
            return arrival_time <= r.arrival_time;
}
        return burst_time < r.burst_time;
    }
    bool equals(process b){
        if(name == b.name){
            
            return true;
        }else{
            return false;
        }
    }

};


void removeElement(vector<process> &v ,process p){

    for(int i=0;i<v.size();++i){
        if(v.at(i).equals(p)){
            v.erase(v.begin()+i);
        }
    }

}

int process::kk = 1;

int main()
{

     process p1(1,3);
    process p2(2,4);
    process p3(1,2);
    process p4(4,4);


    vector<process> v ;
    vector<process> temp;

      v.push_back(p1);
      v.push_back(p2);
      v.push_back(p3);
      v.push_back(p4);

   

    vector<int> arr;
    vector<int> tracking;
    int process_done=0;

  


    list<process> que;


    int timer=0;
    
    
    


    for(int i=0;i<4;i++){
        if(v.at(i).getArrival() <=timer){  // 0
            que.push_back(v.at(i));
        }
    }
    que.sort();


    bool flag=false;
    
    
    
     arr.push_back(0);   
   while(process_done != 4){


   if(que.size()==0){
    timer++;                                  //4 5
     for(int z=0;z<v.size();z++){
        if(v.at(z).getArrival() <=timer){
            que.push_back(v.at(z));
        }
    }
    que.sort();
    flag = true;

   }else{
       
       //also remove that process which is done
       
  if(flag){
     tracking.push_back(0);
     arr.push_back(timer);
   }
 tracking.push_back(1);

    arr.push_back( que.front().getBurst()+arr.at(arr.size()-1));

    timer += que.front().getBurst();   //right

 
flag=false;
process_done++;

temp.push_back(que.front());
removeElement(v,que.front());

que.clear();
              for(int i=0;i<v.size();i++){
        if(v.at(i).getArrival() <=timer){
            que.push_back(v.at(i));
        }
    }
    que.sort();

   }

}
//calculating waiting time
int result=0;

for(int i=0,j=0;i<4;){
    if(tracking.at(j)){
        result +=  arr.at(j) - temp.at(i).getArrival();
        cout<<arr.at(j)<<" - "<<temp.at(i).getArrival()<<endl;
        i++;
        j++;
        
    }else{
        j++;
        
    }
}
cout<<"waiting time is : "<<result/4.0<<endl;

//calculating total around time
int total=0;

for(int i=0,j=0;i<4;){
    if(tracking.at(j)){
        total +=  arr.at(j+1) - temp.at(i).getArrival();
        cout<<arr.at(j+1)<<" - "<<temp.at(i).getArrival()<<endl;
        i++;
        j++;
        
    }else{
        j++;
        
    }
}
cout<<"total turn around time is : "<<total/4.0<<endl;


    return 0;
}
